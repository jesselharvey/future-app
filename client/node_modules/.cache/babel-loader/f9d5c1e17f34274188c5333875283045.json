{"ast":null,"code":"var _s = $RefreshSig$();\n\n// 1. imports\nimport { useSelector, useDispatch } from \"react-redux\";\nimport api, { AuthService } from '../../utils/request'; // 2. action definitions\n\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\nconst LOGIN_PENDING = 'auth/LOGIN_PENDING';\nconst LOGOUT = 'auth/LOGOUT'; // 3. initial state\n\nconst initialState = {\n  example: '',\n  // on load get if user is authenticated\n  isAuthenticated: AuthService.isAuthenticated(),\n  pending: false\n}; // 4. reducer\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_PENDING:\n      return { ...state,\n        pending: true\n      };\n\n    case LOGIN_SUCCESS:\n      return { ...state,\n        isAuthenticated: true,\n        pending: false\n      };\n\n    case LOGOUT:\n      return { ...state,\n        isAuthenticated: false,\n        pending: false\n      };\n\n    default:\n      return state;\n  }\n});\n\nfunction loginUser(username, password) {\n  return dispatch => {\n    return api.login(username, password).then(resp => {\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    });\n  };\n}\n\nfunction logoutUser() {\n  return dispatch => {\n    return api.logout().then(resp => {\n      dispatch({\n        type: LOGOUT\n      });\n    });\n  };\n}\n\nfunction signupUser(username, password) {\n  return dispatch => {\n    return api.signup(username, password).then(resp => {\n      dispatch({\n        type: LOGOUT\n      });\n    });\n  };\n} // 6. custom hook\n\n\nexport function useAuth() {\n  _s();\n\n  const dispatch = useDispatch();\n  const isAuthenticated = useSelector(appState => appState.authState.isAuthenticated);\n\n  const login = (username, password) => dispatch(loginUser(username, password));\n\n  const signup = (username, password) => dispatch(signupUser(username, password));\n\n  const logout = () => dispatch(logoutUser());\n\n  const testProtected = () => api.get('/dashboard');\n\n  return {\n    login,\n    logout,\n    signup,\n    isAuthenticated,\n    testProtected\n  };\n} //\n\n_s(useAuth, \"VbOmzncWnjqGtdBtqZQ/5k9fTxk=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/punchcode/Desktop/class-projects/future/client/src/features/authentication/auth.js"],"names":["useSelector","useDispatch","api","AuthService","LOGIN_SUCCESS","LOGIN_PENDING","LOGOUT","initialState","example","isAuthenticated","pending","state","action","type","loginUser","username","password","dispatch","login","then","resp","logoutUser","logout","signupUser","signup","useAuth","appState","authState","testProtected","get"],"mappings":"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","sourcesContent":["// 1. imports\nimport { useSelector, useDispatch } from \"react-redux\"\nimport api, { AuthService } from '../../utils/request'\n\n// 2. action definitions\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS'\nconst LOGIN_PENDING = 'auth/LOGIN_PENDING'\nconst LOGOUT = 'auth/LOGOUT'\n\n// 3. initial state\nconst initialState = {\n    example: '',\n    // on load get if user is authenticated\n    isAuthenticated: AuthService.isAuthenticated(),\n    pending: false,\n}\n\n// 4. reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_PENDING:\n        return {...state, pending: true}\n    case LOGIN_SUCCESS:\n        return {...state, isAuthenticated: true, pending: false}\n    case LOGOUT:\n        return {...state, isAuthenticated: false, pending: false}\n    default:\n        return state\n  }\n}\n\nfunction loginUser(username, password) {\n    return dispatch => {\n        return api.login(username, password)\n        .then(resp => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n            })\n        })\n    }\n}\n\nfunction logoutUser() {\n    return dispatch => {\n        return api.logout().then(resp => {\n            dispatch({\n                type: LOGOUT,\n            })\n        })\n    }\n}\n\nfunction signupUser(username, password) {\n    return dispatch => {\n        return api.signup(username, password).then(resp => {\n            dispatch({\n                type: LOGOUT,\n            })\n        })\n    }\n}\n\n// 6. custom hook\nexport function useAuth() {\n  const dispatch = useDispatch()\n  const isAuthenticated = useSelector(appState => appState.authState.isAuthenticated)\n  const login = (username, password) => dispatch(loginUser(username, password))\n  const signup = (username, password) => dispatch(signupUser(username, password))\n  const logout = () => dispatch(logoutUser())\n  const testProtected = () => api.get('/dashboard')\n\n  return { login, logout, signup, isAuthenticated, testProtected }\n}\n\n//"]},"metadata":{},"sourceType":"module"}